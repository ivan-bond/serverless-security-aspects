org: presentolo
app: serverless-aws-security
service: aws-node-http-api-project
frameworkVersion: '3'

configValidationMode: error # Stellt sicher, dass das Deployment bei Konfigurationsfehlern fehlschlägt, indem es eine Validierung der Konfiguration auf Fehler erzwingt.

plugins:
  - serverless-iam-roles-per-function
  - serverless-api-gateway-throttling
  - serverless-associate-waf

custom:
  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 1000
    maxConcurrentRequests: 500

  # Associate WAF Web ACL with API Gateway of current stack
  associateWaf:
    name: ${self:resources.Resources.WAFRegionalWebACL.Properties.Name}
    version: Regional

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  tracing:
    apiGateway: true # Aktiviert X-Ray für API Gateway
    lambda: true # Aktiviert X-Ray für Lambda-Funktionen
  logs:
    restApi: false
    httpApi: true # Aktiviert das Logging für HTTP APIs
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminConfirmSignUp
      Resource:
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}
  environment:
    COGNITO_CLIENT_ID:
      Ref: CognitoUserPoolClient
    COGNITO_USER_POOL_ID:
      Ref: CognitoUserPool
    TABLE_NAME:
      Ref: TodoTable

functions:
  addTodo:
    handler: src/handler/addTodo.handler
    events:
      - httpApi:
          path: /
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt:
            - TodoTable
            - Arn
    tracing: true  # Aktiviert X-Ray Tracing für diese Funktion

  fetchTodos:
    handler: src/handler/fetchTodos.handler
    events:
      - httpApi:
          path: /todos
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          Fn::GetAtt:
            - TodoTable
            - Arn
    tracing: true  # Aktiviert X-Ray Tracing für diese Funktion

  fetchTodo:
    handler: src/handler/fetchTodo.handler
    events:
      - httpApi:
          path: /todo/{id}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          Fn::GetAtt:
            - TodoTable
            - Arn
    tracing: true  # Aktiviert X-Ray Tracing für diese Funktion
          
  updateTodo:
    handler: src/handler/updateTodo.handler
    events:
      - httpApi:
          path: /todo/{id}
          method: put
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          Fn::GetAtt:
            - TodoTable
            - Arn
    tracing: true  # Aktiviert X-Ray Tracing für diese Funktion

  registerUser:
    handler: src/handler/register.handler
    events:
      - http:
          method: post
          path: /register
    tracing: true  # Aktiviert X-Ray Tracing für diese Funktion

  loginUser:
    handler: src/handler/login.handler
    events:
      - http:
          method: post
          path: /login
    tracing: true  # Aktiviert X-Ray Tracing für diese Funktion

  throttlingFunction:
    handler: src/handler/throttling.handler
    events:
      - sns:
          arn: !Ref TopicInvocationRateAlarm
          topicName: invocation-rate-alarm
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:PutFunctionConcurrency
        Resource: "*"

  dethrottlingFunction:
    handler: src/handler/dethrottling.handler
    events:
      - sns:
          arn: !Ref TopicLowInvocationRateAlarm
          topicName: low-invocation-rate-alarm
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:PutFunctionConcurrency
        Resource: "*"

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TodoTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: TodoUserPool
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: TodoUserPoolClient
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - USER_PASSWORD_AUTH

    TopicErroringLambdaAlarm:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: lambda-fehler-alarm

    ErroringLambdaAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Lambda Fehler
        Namespace: AWS/Lambda
        MetricName: Errors
        Statistic: Sum
        Threshold: 3
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        TreatMissingData: breaching
        AlarmActions:
          - !Ref TopicErroringLambdaAlarm
        Dimensions:
          - Name: FunctionName
            Value: addTodo
        
    TopicErroringLambdaAlarmSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ivanbond123@gmail.com
        Protocol: email
        TopicArn: !Ref TopicErroringLambdaAlarm

    TopicInvocationRateAlarm:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: invocation-rate-alarm

    TopicLowInvocationRateAlarm:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: low-invocation-rate-alarm

    InvocationRateAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Alarm für hohe Aufrufrate der Lambda-Funktion loginUser
        Namespace: AWS/Lambda
        MetricName: Invocations
        Statistic: Sum
        Threshold: 100 # Schwellenwert
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 60 # Überwachungszeitraum in Sekunden
        TreatMissingData: breaching
        AlarmActions:
          - !Ref TopicInvocationRateAlarm
        Dimensions:
          - Name: FunctionName
            Value: loginUser

    InvocationRateAlarmOK:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Alarm zurückgesetzt, Aufrufrate der Lambda-Funktion loginUser ist normal
        Namespace: AWS/Lambda
        MetricName: Invocations
        Statistic: Sum
        Threshold: 100 # Schwellenwert
        ComparisonOperator: LessThanThreshold
        EvaluationPeriods: 1
        Period: 60 # Überwachungszeitraum in Sekunden
        TreatMissingData: breaching
        OKActions:
          - !Ref TopicLowInvocationRateAlarm
        Dimensions:
          - Name: FunctionName
            Value: loginUser

    InvocationRateAlarmSubscriptionEmail:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ivanbond123@gmail.com
        Protocol: email
        TopicArn: !Ref TopicInvocationRateAlarm

    WAFRegionalWebACL: ${file(src/resources/waf.yml):WAFRegionalWebACL}