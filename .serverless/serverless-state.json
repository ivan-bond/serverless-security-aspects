{
  "service": {
    "service": "aws-node-http-api-project",
    "serviceObject": {
      "name": "aws-node-http-api-project"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "eu-central-1",
      "tracing": {
        "apiGateway": true,
        "lambda": true
      },
      "logs": {
        "restApi": false,
        "httpApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourcePath\":\"$context.routeKey\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"stage\":\"$context.stage\",\"status\":\"$context.status\",\"integrationStatus\":\"$context.integrationStatus\",\"integrationLatency\":\"$context.integrationLatency\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_HTTP_API_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:AdminConfirmSignUp"
          ],
          "Resource": [
            {
              "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}"
            }
          ]
        }
      ],
      "environment": {
        "COGNITO_CLIENT_ID": {
          "Ref": "CognitoUserPoolClient"
        },
        "COGNITO_USER_POOL_ID": {
          "Ref": "CognitoUserPool"
        },
        "TABLE_NAME": {
          "Ref": "TodoTable"
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AddTodoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-node-http-api-project-dev-addTodo"
            }
          },
          "FetchTodosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-node-http-api-project-dev-fetchTodos"
            }
          },
          "FetchTodoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-node-http-api-project-dev-fetchTodo"
            }
          },
          "UpdateTodoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-node-http-api-project-dev-updateTodo"
            }
          },
          "RegisterUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-node-http-api-project-dev-registerUser"
            }
          },
          "LoginUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-node-http-api-project-dev-loginUser"
            }
          },
          "ThrottlingFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-node-http-api-project-dev-throttlingFunction"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-node-http-api-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-node-http-api-project-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-node-http-api-project-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-node-http-api-project",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-c0276d8a-f6ec-4494-9aed-aad7e8d117f4"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "AddTodoLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "FetchTodosLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "FetchTodoLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateTodoLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "RegisterUserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "LoginUserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ThrottlingFunctionLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AddTodoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z/aws-node-http-api-project.zip"
              },
              "Handler": "s_addTodo.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-node-http-api-project-dev-addTodo",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "COGNITO_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "AddTodoIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddTodoIamRoleLambdaExecution",
              "AddTodoLogGroup"
            ]
          },
          "FetchTodosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z/aws-node-http-api-project.zip"
              },
              "Handler": "s_fetchTodos.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-node-http-api-project-dev-fetchTodos",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "COGNITO_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "FetchTodosIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FetchTodosIamRoleLambdaExecution",
              "FetchTodosLogGroup"
            ]
          },
          "FetchTodoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z/aws-node-http-api-project.zip"
              },
              "Handler": "s_fetchTodo.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-node-http-api-project-dev-fetchTodo",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "COGNITO_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "FetchTodoIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FetchTodoIamRoleLambdaExecution",
              "FetchTodoLogGroup"
            ]
          },
          "UpdateTodoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z/aws-node-http-api-project.zip"
              },
              "Handler": "s_updateTodo.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-node-http-api-project-dev-updateTodo",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "COGNITO_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "UpdateTodoIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTodoIamRoleLambdaExecution",
              "UpdateTodoLogGroup"
            ]
          },
          "RegisterUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z/aws-node-http-api-project.zip"
              },
              "Handler": "s_registerUser.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-node-http-api-project-dev-registerUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "COGNITO_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterUserLogGroup"
            ]
          },
          "LoginUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z/aws-node-http-api-project.zip"
              },
              "Handler": "s_loginUser.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-node-http-api-project-dev-loginUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "COGNITO_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginUserLogGroup"
            ]
          },
          "ThrottlingFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z/aws-node-http-api-project.zip"
              },
              "Handler": "s_throttlingFunction.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-node-http-api-project-dev-throttlingFunction",
              "MemorySize": 1024,
              "Timeout": 6,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "COGNITO_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_CLIENT_ID\"]"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"COGNITO_USER_POOL_ID\"]"
                  },
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ThrottlingFunctionIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ThrottlingFunctionIamRoleLambdaExecution",
              "ThrottlingFunctionLogGroup"
            ]
          },
          "AddTodoLambdaVersiono3fnfDTHFKqaA1pGVHRnlUn74mHzLUtkgZ3TSs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddTodoLambdaFunction"
              },
              "CodeSha256": "mFggzF2AneDhEVBnvOkxAxsdJ71gMwNHAyszsZyzLB8="
            }
          },
          "FetchTodosLambdaVersioniZBExsJFddT0fikfW36DZhtG1Eb0xO4oFIQTzng": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FetchTodosLambdaFunction"
              },
              "CodeSha256": "mFggzF2AneDhEVBnvOkxAxsdJ71gMwNHAyszsZyzLB8="
            }
          },
          "FetchTodoLambdaVersionrlKaI5hU4C8VvxIDVg8aGZQiRGfj4dttX3SR82QkCk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FetchTodoLambdaFunction"
              },
              "CodeSha256": "mFggzF2AneDhEVBnvOkxAxsdJ71gMwNHAyszsZyzLB8="
            }
          },
          "UpdateTodoLambdaVersion8uRnmme38a3bQMs2QMyaz1aU4L64VCsLREKQDhJE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTodoLambdaFunction"
              },
              "CodeSha256": "mFggzF2AneDhEVBnvOkxAxsdJ71gMwNHAyszsZyzLB8="
            }
          },
          "RegisterUserLambdaVersionWkKjyqajXGgK4D9NiipDIs7I189M5zW0Qu3jQuiE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterUserLambdaFunction"
              },
              "CodeSha256": "mFggzF2AneDhEVBnvOkxAxsdJ71gMwNHAyszsZyzLB8="
            }
          },
          "LoginUserLambdaVersionqFBrgWFsS5P1gM4RrgTYC7Km7XzfrWhgMGj1Eo3TY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginUserLambdaFunction"
              },
              "CodeSha256": "mFggzF2AneDhEVBnvOkxAxsdJ71gMwNHAyszsZyzLB8="
            }
          },
          "ThrottlingFunctionLambdaVersionFI4juA3dS6rvhsO2PYvZiyaupgqoD4dlRhBhix71z0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ThrottlingFunctionLambdaFunction"
              },
              "CodeSha256": "mFggzF2AneDhEVBnvOkxAxsdJ71gMwNHAyszsZyzLB8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-aws-node-http-api-project",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1723749314466": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRegisterPost",
              "ApiGatewayMethodLoginPost"
            ]
          },
          "RegisterUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ThrottlingFunctionSnsSubscriptionInvocationratealarm": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "TopicInvocationRateAlarm"
              },
              "Protocol": "lambda",
              "Endpoint": {
                "Fn::GetAtt": [
                  "ThrottlingFunctionLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "ThrottlingFunctionLambdaPermissionInvocationratealarmSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ThrottlingFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "sns.amazonaws.com",
              "SourceArn": {
                "Ref": "TopicInvocationRateAlarm"
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-aws-node-http-api-project",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/http-api/aws-node-http-api-project-dev"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              },
              "AccessLogSettings": {
                "DestinationArn": {
                  "Fn::GetAtt": [
                    "HttpApiLogGroup",
                    "Arn"
                  ]
                },
                "Format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourcePath\":\"$context.routeKey\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"stage\":\"$context.stage\",\"status\":\"$context.status\",\"integrationStatus\":\"$context.integrationStatus\",\"integrationLatency\":\"$context.integrationLatency\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_HTTP_API_LOG\",\"version\":\"1.0.0\"}"
              }
            },
            "DependsOn": "HttpApiLogGroup"
          },
          "AddTodoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddTodoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddTodo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddTodoLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePost": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddTodo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddTodo"
          },
          "FetchTodosLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FetchTodosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFetchTodos": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FetchTodosLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTodos": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /todos",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFetchTodos"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFetchTodos"
          },
          "FetchTodoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FetchTodoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFetchTodo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FetchTodoLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTodoIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /todo/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFetchTodo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFetchTodo"
          },
          "UpdateTodoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTodoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTodo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateTodoLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutTodoIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /todo/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTodo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTodo"
          },
          "AddTodoIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-node-http-api-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-node-http-api-project-dev-addTodo:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "TodoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-node-http-api-project",
                    "dev",
                    "addTodo",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "FetchTodosIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-node-http-api-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-node-http-api-project-dev-fetchTodos:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Scan"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "TodoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-node-http-api-project",
                    "dev",
                    "fetchTodos",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "FetchTodoIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-node-http-api-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-node-http-api-project-dev-fetchTodo:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "TodoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-node-http-api-project",
                    "dev",
                    "fetchTodo",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "UpdateTodoIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-node-http-api-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-node-http-api-project-dev-updateTodo:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "TodoTable",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-node-http-api-project",
                    "dev",
                    "updateTodo",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "ThrottlingFunctionIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-node-http-api-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-node-http-api-project-dev-throttlingFunction:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:PutFunctionConcurrency"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-node-http-api-project",
                    "dev",
                    "throttlingFunction",
                    {
                      "Ref": "AWS::Region"
                    }
                  ]
                ]
              },
              "ManagedPolicyArns": []
            }
          },
          "TodoTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TodoTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "TodoUserPool",
              "Schema": [
                {
                  "Name": "email",
                  "AttributeDataType": "String",
                  "Mutable": true,
                  "Required": true
                }
              ],
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8
                }
              }
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "TodoUserPoolClient",
              "GenerateSecret": false,
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "ExplicitAuthFlows": [
                "USER_PASSWORD_AUTH"
              ]
            }
          },
          "TopicErroringLambdaAlarm": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "lambda-fehler-alarm"
            }
          },
          "ErroringLambdaAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Lambda Fehler",
              "Namespace": "AWS/Lambda",
              "MetricName": "Errors",
              "Statistic": "Sum",
              "Threshold": 3,
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods": 1,
              "Period": 300,
              "TreatMissingData": "breaching",
              "AlarmActions": [
                {
                  "Ref": "TopicErroringLambdaAlarm"
                }
              ],
              "Dimensions": [
                {
                  "Name": "FunctionName",
                  "Value": "addTodo"
                }
              ]
            }
          },
          "TopicErroringLambdaAlarmSubscription": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Endpoint": "ivanbond123@gmail.com",
              "Protocol": "email",
              "TopicArn": {
                "Ref": "TopicErroringLambdaAlarm"
              }
            }
          },
          "TopicInvocationRateAlarm": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "invocation-rate-alarm"
            }
          },
          "InvocationRateAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Alarm für hohe Aufrufrate der Lambda-Funktion addTodo",
              "Namespace": "AWS/Lambda",
              "MetricName": "Invocations",
              "Statistic": "Sum",
              "Threshold": 100,
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods": 1,
              "Period": 60,
              "TreatMissingData": "breaching",
              "AlarmActions": [
                {
                  "Ref": "TopicInvocationRateAlarm"
                }
              ],
              "Dimensions": [
                {
                  "Name": "FunctionName",
                  "Value": "addTodo"
                }
              ]
            }
          },
          "InvocationRateAlarmSubscriptionEmail": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Endpoint": "ivanbond123@gmail.com",
              "Protocol": "email",
              "TopicArn": {
                "Ref": "TopicInvocationRateAlarm"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-ServerlessDeploymentBucketName"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-EnterpriseLogAccessIamRole"
            }
          },
          "AddTodoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddTodoLambdaVersiono3fnfDTHFKqaA1pGVHRnlUn74mHzLUtkgZ3TSs"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-AddTodoLambdaFunctionQualifiedArn"
            }
          },
          "FetchTodosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FetchTodosLambdaVersioniZBExsJFddT0fikfW36DZhtG1Eb0xO4oFIQTzng"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-FetchTodosLambdaFunctionQualifiedArn"
            }
          },
          "FetchTodoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FetchTodoLambdaVersionrlKaI5hU4C8VvxIDVg8aGZQiRGfj4dttX3SR82QkCk"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-FetchTodoLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTodoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTodoLambdaVersion8uRnmme38a3bQMs2QMyaz1aU4L64VCsLREKQDhJE"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-UpdateTodoLambdaFunctionQualifiedArn"
            }
          },
          "RegisterUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterUserLambdaVersionWkKjyqajXGgK4D9NiipDIs7I189M5zW0Qu3jQuiE"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-RegisterUserLambdaFunctionQualifiedArn"
            }
          },
          "LoginUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginUserLambdaVersionqFBrgWFsS5P1gM4RrgTYC7Km7XzfrWhgMGj1Eo3TY"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-LoginUserLambdaFunctionQualifiedArn"
            }
          },
          "ThrottlingFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ThrottlingFunctionLambdaVersionFI4juA3dS6rvhsO2PYvZiyaupgqoD4dlRhBhix71z0"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-ThrottlingFunctionLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-ServiceEndpoint"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-HttpApiUrl"
            }
          },
          "RestApiIdForApigThrottling": {
            "Description": "REST API ID",
            "Value": {
              "Ref": "ApiGatewayRestApi"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-RestApiIdForApigThrottling"
            }
          },
          "HttpApiIdForApigThrottling": {
            "Description": "HTTP API ID",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-aws-node-http-api-project-dev-HttpApiIdForApigThrottling"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "apiGatewayThrottling": {
        "maxRequestsPerSecond": 1000,
        "maxConcurrentRequests": 500
      }
    },
    "plugins": [
      "serverless-iam-roles-per-function",
      "serverless-api-gateway-throttling"
    ],
    "pluginsData": {},
    "functions": {
      "addTodo": {
        "handler": "s_addTodo.handler",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/"
          }
        ],
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddTodoIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "tracing": true,
        "name": "aws-node-http-api-project-dev-addTodo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AddTodoLambdaVersiono3fnfDTHFKqaA1pGVHRnlUn74mHzLUtkgZ3TSs"
      },
      "fetchTodos": {
        "handler": "s_fetchTodos.handler",
        "events": [
          {
            "httpApi": {
              "path": "/todos",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/todos"
          }
        ],
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FetchTodosIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "tracing": true,
        "name": "aws-node-http-api-project-dev-fetchTodos",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "FetchTodosLambdaVersioniZBExsJFddT0fikfW36DZhtG1Eb0xO4oFIQTzng"
      },
      "fetchTodo": {
        "handler": "s_fetchTodo.handler",
        "events": [
          {
            "httpApi": {
              "path": "/todo/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/todo/{id}"
          }
        ],
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FetchTodoIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "tracing": true,
        "name": "aws-node-http-api-project-dev-fetchTodo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "FetchTodoLambdaVersionrlKaI5hU4C8VvxIDVg8aGZQiRGfj4dttX3SR82QkCk"
      },
      "updateTodo": {
        "handler": "s_updateTodo.handler",
        "events": [
          {
            "httpApi": {
              "path": "/todo/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/todo/{id}"
          }
        ],
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateTodoIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "tracing": true,
        "name": "aws-node-http-api-project-dev-updateTodo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateTodoLambdaVersion8uRnmme38a3bQMs2QMyaz1aU4L64VCsLREKQDhJE"
      },
      "registerUser": {
        "handler": "s_registerUser.handler",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "register",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "tracing": true,
        "name": "aws-node-http-api-project-dev-registerUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterUserLambdaVersionWkKjyqajXGgK4D9NiipDIs7I189M5zW0Qu3jQuiE"
      },
      "loginUser": {
        "handler": "s_loginUser.handler",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "login",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "tracing": true,
        "name": "aws-node-http-api-project-dev-loginUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginUserLambdaVersionqFBrgWFsS5P1gM4RrgTYC7Km7XzfrWhgMGj1Eo3TY"
      },
      "throttlingFunction": {
        "handler": "s_throttlingFunction.handler",
        "events": [
          {
            "sns": {
              "arn": {
                "Ref": "TopicInvocationRateAlarm"
              },
              "topicName": "invocation-rate-alarm"
            }
          }
        ],
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ThrottlingFunctionIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "aws-node-http-api-project-dev-throttlingFunction",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ThrottlingFunctionLambdaVersionFI4juA3dS6rvhsO2PYvZiyaupgqoD4dlRhBhix71z0"
      }
    },
    "resources": {
      "Resources": {
        "TodoTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "TodoTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "TodoUserPool",
            "Schema": [
              {
                "Name": "email",
                "AttributeDataType": "String",
                "Mutable": true,
                "Required": true
              }
            ],
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8
              }
            }
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "TodoUserPoolClient",
            "GenerateSecret": false,
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "ExplicitAuthFlows": [
              "USER_PASSWORD_AUTH"
            ]
          }
        },
        "TopicErroringLambdaAlarm": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "lambda-fehler-alarm"
          }
        },
        "ErroringLambdaAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
            "AlarmDescription": "Lambda Fehler",
            "Namespace": "AWS/Lambda",
            "MetricName": "Errors",
            "Statistic": "Sum",
            "Threshold": 3,
            "ComparisonOperator": "GreaterThanOrEqualToThreshold",
            "EvaluationPeriods": 1,
            "Period": 300,
            "TreatMissingData": "breaching",
            "AlarmActions": [
              {
                "Ref": "TopicErroringLambdaAlarm"
              }
            ],
            "Dimensions": [
              {
                "Name": "FunctionName",
                "Value": "addTodo"
              }
            ]
          }
        },
        "TopicErroringLambdaAlarmSubscription": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "Endpoint": "ivanbond123@gmail.com",
            "Protocol": "email",
            "TopicArn": {
              "Ref": "TopicErroringLambdaAlarm"
            }
          }
        },
        "TopicInvocationRateAlarm": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "invocation-rate-alarm"
          }
        },
        "InvocationRateAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
            "AlarmDescription": "Alarm für hohe Aufrufrate der Lambda-Funktion addTodo",
            "Namespace": "AWS/Lambda",
            "MetricName": "Invocations",
            "Statistic": "Sum",
            "Threshold": 100,
            "ComparisonOperator": "GreaterThanOrEqualToThreshold",
            "EvaluationPeriods": 1,
            "Period": 60,
            "TreatMissingData": "breaching",
            "AlarmActions": [
              {
                "Ref": "TopicInvocationRateAlarm"
              }
            ],
            "Dimensions": [
              {
                "Name": "FunctionName",
                "Value": "addTodo"
              }
            ]
          }
        },
        "InvocationRateAlarmSubscriptionEmail": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "Endpoint": "ivanbond123@gmail.com",
            "Protocol": "email",
            "TopicArn": {
              "Ref": "TopicInvocationRateAlarm"
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "error",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "presentolo",
      "app": "serverless-aws-security",
      "service": "aws-node-http-api-project",
      "frameworkVersion": "3",
      "configValidationMode": "error",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "serverless-aws-security",
    "org": "presentolo",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "c0276d8a-f6ec-4494-9aed-aad7e8d117f4",
    "appUid": "p1qwhQJVLGHVyrHbDz",
    "artifact": "/home/kc/Schreibtisch/Bachelor_App/serverless-security-aspects/.serverless/aws-node-http-api-project.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/aws-node-http-api-project/dev/1723749330698-2024-08-15T19:15:30.698Z",
    "artifact": "aws-node-http-api-project.zip"
  }
}